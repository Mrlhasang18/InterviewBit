Q) Problem Description

Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:  

If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.


Problem Constraints
1 <= N <= 105

-109 <= A[i] <= 109



Input Format
The first and the only argument of input contains an integer array A, of length N.



Output Format
Return an array of integers, that is a subarray of A that satisfies the given conditions.



Example Input
Input 1:

 A = [1, 2, 5, -7, 2, 3]
Input 2:

 A = [10, -1, 2, 3, -4, 100]


Example Output
Output 1:

 [1, 2, 5]
Output 2:

 [100]


Example Explanation
Explanation 1:

 The two sub-arrays are [1, 2, 5] [2, 3].
 The answer is [1, 2, 5] as its sum is larger than [2, 3].
Explanation 2:

 The three sub-arrays are [10], [2, 3], [100].
 The answer is [100] as its sum is larger than the other two.


ans:

vector<int> Solution::maxset(vector<int> &A) {
    long int max_sum = -1, sum=0;
    vector<int> max_ans, ans;
   
    for(auto val:A){
        if(val<0) {if(sum>max_sum) {max_sum = sum; max_ans = ans;}
                   sum = 0;
                   while(!ans.empty()) {ans.pop_back();}
                   continue;
                   }
        sum += val;
        ans.push_back(val);
    }
   
    if(sum>max_sum) {max_sum = sum; max_ans = ans;} // right boundary case
   
    return max_ans;
}


explanation:

Initialization:

long int max_sum = -1, sum = 0;
vector<int> max_ans, ans;
max_sum stores the maximum sum found so far.
sum keeps track of the current sum of the subarray being processed.
max_ans stores the elements of the subarray with the maximum sum.
ans is used to build the current subarray being considered.
Loop through the Input Vector:

for (auto val : A) {
    // ...
}
The loop iterates through each element of the input vector A.
Check for Negative Values:


if (val < 0) {
    // ...
}
If the current element is negative, it means the current subarray ends.
The code checks if the current sum is greater than the maximum sum found so far.
If true, it updates max_sum and copies the elements of the current subarray to max_ans.
It resets sum to 0 and clears the ans vector to start building a new subarray.
Handle Positive Values:


sum += val;
ans.push_back(val);
If the current element is non-negative, it is added to the current sum (sum).
The element is also added to the ans vector, representing the current subarray.
Right Boundary Case:

if (sum > max_sum) {
    max_sum = sum;
    max_ans = ans;
}
After the loop, there might be a valid subarray that extends to the right boundary.
This block checks if the last subarray has a sum greater than the maximum sum found so far.
Return the Result:

return max_ans;
The function returns the vector max_ans, which contains the elements of the subarray with the maximum non-negative
sum.
In summary, the code efficiently finds the subarray with the maximum non-negative sum in a given vector, handling
negative values and multiple subarrays.
