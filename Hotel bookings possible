bool Solution::hotel(vector<int> &arrive, vector<int> &depart, int k) {
   //soln
    int n=arrive.size();
    vector<vector<int>> nums;
   
    for(int i=0;i<n;i++)
    {
        nums.push_back({arrive[i] , depart[i]});
    }
   
    sort(nums.begin() , nums.end());
   
    priority_queue<int , vector<int> , greater<int>> pq;
   
    for(int i=0;i<nums.size();i++)
    {
        while(!pq.empty() && nums[i][0]>pq.top())
        {
            pq.pop();
        }
       
        if(pq.size()>=k)
        {
            return false;
        }
       
        pq.push(nums[i][1]);
    }
   
    return true;
   
     
}


